knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y= knn_100_train)) + geom_line(aes(x=k_vec, y= knn_100_test))
plot(k_vec, knn_100)
print(table)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
print(table)
#error <- (table[2]+table[3])/175
#return(error)
}
)
knn(train[c(1, 2)]
train[c(1, 2)]
train[c(1, 2)]
print(table)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
print(table)
#error <- (table[2]+table[3])/175
#return(error)
}
)
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
print(table)
#error <- (table[2]+table[3])/175
#return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y= knn_100_train, col="yellow")) + geom_line(aes(x=k_vec, y= knn_100_test))
set.seed(1)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
print(table)
#error <- (table[2]+table[3])/1750
#return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y= knn_100_train, color="yellow")) + geom_line(aes(x=k_vec, y= knn_100_test))
ggplot() + geom_line(aes(x=k_vec, y= knn_100_train, colour="yellow")) + geom_line(aes(x=k_vec, y= knn_100_test))
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train) + geom_line(aes(x=k_vec, y= knn_100_test))
set.seed(1)
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train) + geom_line(aes(x=k_vec, y= knn_100_test))
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train) + geom_line(aes(x=k_vec, y= knn_100_test))
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 2, prob = T)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train) + geom_line(aes(x=k_vec, y= knn_100_test))
#plot(k_vec, knn_100)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train)) + geom_line(aes(x=k_vec, y= knn_100_test))
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train, color = "train")) + geom_line(aes(x=k_vec, y= knn_100_test))
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train, color = "train")) + geom_line(aes(x=k_vec, y= knn_100_test, color = "test"))
set.seed(1)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
print(table)
#error <- (table[2]+table[3])/175
#return(error)
}
)
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 2, prob = T)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train, color = "train")) + geom_line(aes(x=k_vec, y= knn_100_test, color = "test"))
knn_100_train
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 2, prob = T)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train, color = "train")) + geom_line(aes(x=k_vec, y= knn_100_test, color = "test"))
iris
ggplot() + geom_point(x = iris$Sepal.Length, y = iris$Sepal.Width, class = iris$Species)
ggplot() + geom_point(x = iris$Sepal.Length, y = iris$Sepal.Width, class = iris$Species)
ggplot() + geom_point(x = iris$Sepal.Length, y = iris$Sepal.Width, group = iris$Species)
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p + geom_point()
p + p + geom_point(aes(colour = factor(Species)))
iris
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p + p + geom_point(aes(colour = factor(species)))
iris
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p + p + geom_point(aes(colour = factor(Species)))
iris
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p + geom_point(aes(colour = factor(Species)))
lda(iris$Species ~ iris$Sepal.Length + iris$Sepal.Width)
library(MASS)
lda(iris$Species ~ iris$Sepal.Length + iris$Sepal.Width)
knitr::opts_chunk$set(echo = TRUE)
#for n = 0
#h(x,0) = 1
#for n=1
#h(x, 1)= 1 + x
#for n = 2
#h(x, 2)= 1 + x + x^2
n=6
h=1
x=1
for (i in 1:n){
h <- h + x^i
#print(h)
}
print(h)
library(dplyr)
sample <- c(1,2,3,4,5,6,7)
sum_3rd <- function(x) {
x[seq(1, length(x), by = 3)] %>%
sum()
}
sum_3rd(sample)
library(dplyr)
sample <- c(1,2,3,4,5,6,7)
sum_3rd <- function(x) {
x[seq(0, length(x), by = 3)] %>%
sum()
}
sum_3rd(sample)
library(dplyr)
sample <- c(1,2,3,4,5,6,7)
sum_3rd <- function(x) {
x[seq(3, length(x), by = 3)] %>%
sum()
}
sum_3rd(sample)
library(dplyr)
sample <- c(1,2,3,4,5,6,7)
sum_3rd <- function(x) {
x[seq(0, length(x), by = 3)] %>%
sum()
}
sum_3rd(sample)
library(dplyr)
#sample <- c(1,2,3,4,5,6,7)
sum_3rd <- function(x) {
x[seq(0, length(x), by = 3)] %>%
sum()
}
#sum_3rd(sample)
test <- c(10:1, 50)
test
test <- c(10:1, 50)
Minimum_function <- function(x){
x.min <- x[1]
for (i in 1:length(x)){
if (x[i] < x.min) {
x.min <- x[i]
}
}
print(x.min)
}
Minimum_function(test)
craps_testing()
#set.seed(1) for testing
craps_testing <- function() {
roll_1 <- sum(ceiling(6*runif(2)))
if (roll_1 == 7 | roll_1 == 11) {print( paste("rolled a", roll_1, "you win"))}
else {
print(roll_1)
dice_roll <- sum(ceiling(6*runif(2)))
while (dice_roll != roll_1 & dice_roll != 7 & dice_roll != 11)
{
print(dice_roll)
dice_roll <- sum(ceiling(6*runif(2)))
}
if (dice_roll == roll_1) print(paste("Your roll matched your first roll, YOU WIN!!!", dice_roll))
else print(paste("You lose, life is hard...", dice_roll))
}}
craps_testing()
craps_testing()
craps_testing()
craps_testing()
craps_testing()
craps <- function() {
roll_1 <- sum(ceiling(6*runif(2)))
if (roll_1 == 7 | roll_1 == 11) {print( paste("rolled a", roll_1, "you win"))}
else {
dice_roll <- sum(ceiling(6*runif(2)))
while (dice_roll != roll_1 & dice_roll != 7 & dice_roll != 11)
{
dice_roll <- sum(ceiling(6*runif(2)))
}
if (dice_roll == roll_1) print("Your roll matched your first roll, YOU WIN!!!")
else print("You lose, life is hard...")
}}
craps()
craps()
craps()
craps()
craps_testing()
t <- seq(0, 10, by = 0.0001) %>% sqrt()
x <- t *cos(2*pi*t)
y <- t *sin(2*pi*t)
plot(x, y)
t <- seq(0, 10, by = 0.0001)
x <- sqrt(t) *cos(2*pi*t)
y <- sqrt(t) *sin(2*pi*t)
plot(x, y)
plot(x, y, cex=1)
plot(x, y, cex=.1)
knitr::opts_chunk$set(echo = TRUE)
knn_fit <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
knitr::opts_chunk$set(echo = TRUE)
train <- read.csv("https://www.dropbox.com/s/nnzaeo73zl2ktwg/PA_HW1_train.csv?dl=1")
test <- read.csv("https://www.dropbox.com/s/u6iuxfm4lz8isg6/PA_HW1_test.csv?dl=1")
library(class)
knn_fit <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = 1, prob = T)
table(knn_fit, train$col)
knn_fit <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
t <- table(knn_fit, test$col)
t[1,2]+t[2,1]
cat(367+352, "were wrongly classified out of", length(knn_fit), "\n")
incorrect <- (367+352)/ (length(knn_fit))
cat("Which is", incorrect, "percent wrong")
library(MASS)
lda_fit <- lda(iris$Species ~ iris$Sepal.Length + iris$Sepal.Width)
predict(lda_fit)
library(MASS)
lda_fit <- lda(iris$Species ~ iris$Sepal.Length + iris$Sepal.Width)
lda_pred <- predict(lda_fit)
table(iris$Species, lda_pred$class)
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
knitr::opts_chunk$set(echo = TRUE)
train <- read.csv("https://www.dropbox.com/s/nnzaeo73zl2ktwg/PA_HW1_train.csv?dl=1")
test <- read.csv("https://www.dropbox.com/s/u6iuxfm4lz8isg6/PA_HW1_test.csv?dl=1")
library(class)
knn_fit <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = 1, prob = T)
table(knn_fit, train$col)
knn_fit <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
t <- table(knn_fit, test$col)
t[1,2]+t[2,1]
cat(367+352, "were wrongly classified out of", length(knn_fit), "\n")
incorrect <- (367+352)/ (length(knn_fit))
cat("Which is", incorrect, "percent wrong")
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 2, prob = T)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train, color = "train")) + geom_line(aes(x=k_vec, y= knn_100_test, color = "test"))
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p <- p + geom_point(aes(colour = factor(Species)))
p
p
expand.grid(seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = .5), seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = .5))
names(grid) <- c("Sepal.Width", "Sepal.Length")
grid <- expand.grid(seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = .5), seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = .5))
names(grid) <- c("Sepal.Width", "Sepal.Length")
p+
grid
predict(lda_fit, grid)
knitr::opts_chunk$set(echo = TRUE)
train <- read.csv("https://www.dropbox.com/s/nnzaeo73zl2ktwg/PA_HW1_train.csv?dl=1")
test <- read.csv("https://www.dropbox.com/s/u6iuxfm4lz8isg6/PA_HW1_test.csv?dl=1")
library(class)
knn_fit <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = 1, prob = T)
table(knn_fit, train$col)
knn_fit <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
t <- table(knn_fit, test$col)
t[1,2]+t[2,1]
cat(367+352, "were wrongly classified out of", length(knn_fit), "\n")
incorrect <- (367+352)/ (length(knn_fit))
cat("Which is", incorrect, "percent wrong")
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 2, prob = T)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train, color = "train")) + geom_line(aes(x=k_vec, y= knn_100_test, color = "test"))
p <- ggplot(iris, aes(Sepal.Length, Sepal.Width))
p <- p + geom_point(aes(colour = factor(Species)))
p
library(MASS)
lda_fit <- lda(iris$Species ~ iris$Sepal.Length + iris$Sepal.Width)
lda_pred <- predict(lda_fit)
table(iris$Species, lda_pred$class)
grid <- expand.grid(seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = .5), seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = .5))
names(grid) <- c("Sepal.Width", "Sepal.Length")
predict(lda_fit, grid)
p+
grid
lda_fit
predict(lda_fit, grid)
library(MASS)
lda_fit <- lda(Species ~ Sepal.Length + Sepal.Width, data=iris)
lda_pred <- predict(lda_fit)
table(iris$Species, lda_pred$class)
grid <- expand.grid(seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = .5), seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = .5))
names(grid) <- c("Sepal.Width", "Sepal.Length")
predict(lda_fit, grid)
boundries <- predict(lda_fit, grid)
p+geom_point(boundries)
p <- ggplot(aes(data=iris, x = Sepal.Length, y= Sepal.Width, color = Species))
iris
p <- ggplot(aes(data=iris, x = Sepal.Length, y= Sepal.Width, color = Species))
p <- ggplot(aes(x = Sepal.Length, y= Sepal.Width, color = Species), iris)
ggplot(aes(x = Sepal.Length, y= Sepal.Width, color = Species), iris) + geom_point()
p <- ggplot(iris, aes(x = Sepal.Length, y= Sepal.Width, color = Species)) + geom_point()
p
p+geom_point(boundries)
knitr::opts_chunk$set(echo = TRUE)
train <- read.csv("https://www.dropbox.com/s/nnzaeo73zl2ktwg/PA_HW1_train.csv?dl=1")
test <- read.csv("https://www.dropbox.com/s/u6iuxfm4lz8isg6/PA_HW1_test.csv?dl=1")
library(class)
knn_fit <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = 1, prob = T)
table(knn_fit, train$col)
knn_fit <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
t <- table(knn_fit, test$col)
t[1,2]+t[2,1]
cat(367+352, "were wrongly classified out of", length(knn_fit), "\n")
incorrect <- (367+352)/ (length(knn_fit))
cat("Which is", incorrect, "percent wrong")
set.seed(1)
library(tidyverse)
k_vec <- c(1:100)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 1, prob = T)
#knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = 2, prob = T)
knn_100_test <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], test[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, test$col)
error <- (table[2]+table[3])/1750
return(error)
}
)
knn_100_train <- sapply(k_vec,
function(x){
output_knn <- knn(train[c(1, 2)], train[c(1, 2)], cl = train$col, k = x, prob = T)
table <- table(output_knn, train$col)
#print(table)
error <- (table[2]+table[3])/175
return(error)
}
)
ggplot() + geom_line(aes(x=k_vec, y = knn_100_train, color = "train")) + geom_line(aes(x=k_vec, y= knn_100_test, color = "test"))
p <- ggplot(iris, aes(x = Sepal.Length, y= Sepal.Width, color = Species)) + geom_point()
p
library(MASS)
lda_fit <- lda(Species ~ Sepal.Length + Sepal.Width, data=iris)
lda_pred <- predict(lda_fit)
table(iris$Species, lda_pred$class)
grid <- expand.grid(seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = .5), seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = .5))
names(grid) <- c("Sepal.Width", "Sepal.Length")
boundries <- predict(lda_fit, grid)
p+geom_point(boundries)
ggplot(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = class)) + geom_point()
str(boundries)
boundries <- predict(lda_fit, grid) %>% as.data.frame()
str(boundries)
p + ggplot(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = class)) + geom_point()
ggplot(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = class)) + geom_point()
boundries
ggplot(boundries, aes(color = class)) + geom_point()
boundries
grid <- expand.grid(seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = .5), seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = .5))
names(grid) <- c("Sepal.Width", "Sepal.Length")
preds <- predict(lda_fit, grid)
boundries <- data.frame(preds$class, grid)
p + ggplot(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = class)) + geom_point()
boundries
ggplot(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class)) + geom_point()
p
p + ggplot(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class)) + geom_point()
p + geom_point(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class))
p + geom_points(boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class))
p + geom_point(data=boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class))
p + geom_point(data=boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class), alpha=.1)
grid <- expand.grid(seq(min(iris$Sepal.Width), max(iris$Sepal.Width), by = .01), seq(min(iris$Sepal.Length), max(iris$Sepal.Length), by = .01))
names(grid) <- c("Sepal.Width", "Sepal.Length")
preds <- predict(lda_fit, grid)
boundries <- data.frame(preds$class, grid)
p + geom_point(data=boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class), alpha=.1)
p + geom_point(data=boundries, aes(x = Sepal.Length, y= Sepal.Width, color = preds.class), alpha=.01)
